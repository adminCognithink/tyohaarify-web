// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  templates     CustomTemplate[]
  preferences   UserPreference?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id          String   @id @default(cuid())
  title       String
  festivalId  String
  templateId  String
  imageUrl    String?
  customImage String? // Base64 or URL for uploaded images
  message     String
  senderName  String
  htmlContent String
  isDraft     Boolean  @default(true)
  isPublic    Boolean  @default(false)
  shareId     String?  @unique // For public sharing
  viewCount   Int      @default(0)
  shareCount  Int      @default(0)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  analytics   CardAnalytics[]
}

model CustomTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  htmlContent String
  cssContent  String?
  isPublic    Boolean  @default(false)
  isPremium   Boolean  @default(false)
  price       Float?
  downloads   Int      @default(0)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPreference {
  id              String @id @default(cuid())
  userId          String @unique
  favoriteThemes  String? // JSON array of theme preferences
  defaultFestival String?
  defaultTemplate String?
  language        String @default("en")
  timezone        String @default("UTC")
  notifications   Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CardAnalytics {
  id       String   @id @default(cuid())
  cardId   String
  event    String   // 'view', 'share', 'download', 'print'
  metadata String?  // JSON for additional data
  ipAddress String?
  userAgent String?
  referrer  String?
  
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

model Festival {
  id          String @id
  name        String
  emoji       String
  description String
  isActive    Boolean @default(true)
  startDate   DateTime?
  endDate     DateTime?
  region      String? // 'global', 'india', 'western', etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}